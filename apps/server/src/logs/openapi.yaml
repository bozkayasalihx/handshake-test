openapi: 3.0.0
info:
  description: |
    natica development for demo usage
  version: "1.0.0"
  title: Natica Development
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: sbozkaya@natica.com.tr
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/natica_development/natica_development/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: vendor
    description: list out all vendors
  - name: vendor_region
    description: LIst out all vendor regions;
  - name: user
    description: Operations about user
  - name: buyer
    description: List out all Buyers
  - name: dealer
    description: list out all dealers

paths:
  /vendor:
    post:
      tags:
        - vendor
      summary: add new vendor to Vendor Table
      operationId: create-vendor
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:vendor'
            - 'read:vendor'
      requestBody:
        $ref: '#/components/requestBodies/Vendor'
    put:
      tags:
        - vendor
      summary: Update an existing vendor
      operationId: updateVendor
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: vendor not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:vendors'
            - 'read:vendors'
      requestBody:
        $ref: '#/components/requestBodies/Vendor'
  '/vendor/{vendorId}':
    get:
      tags:
        - vendor
      summary: Find vendor by ID
      description: Returns a single vendor
      operationId: getVendorById
      parameters:
        - name: vendorId
          in: path
          description: ID of vendor to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '400':
          description: Invalid ID supplied
        '404':
          description: vendor not found
      security:
        - api_key: []
    post:
      tags:
        - vendor
      summary: Updates a vendor in the store with form data
      operationId: updateVendorWithForm
      parameters:
        - name: vendorId
          in: path
          description: ID of vendor that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:vendors'
            - 'read:vendors'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the vendor
                  type: string
                status:
                  description: Updated status of the vendor
                  type: string
    delete:
      tags:
        - vendor
      summary: Deletes a vendor
      operationId: deleteVendor
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: vendorId
          in: path
          description: vendor id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Vendor not found
      security:
        - petstore_auth:
            - 'write:vendors'
            - 'read:vendors'
  /vendor-regions:
    get:
      tags:
        - vendorRegion
      summary: return all vendor regions
      description: Returns a map of status codes to quantities
      operationId: getVendorRegions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
    post:
      tags:
        - vendorRegion
      summary: add new vendor region  to vendor_region Table
      operationId: create-vendor-region
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:vendor'
            - 'read:vendor'
      requestBody:
        $ref: '#/components/requestBodies/Vendor'
  /dealer:
    post:
      tags:
        - dealer
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dealer'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dealer'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dealer'
            application/xml:
              schema:
                $ref: '#/components/schemas/dealer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    dealer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Vendor:
      type: object
      required:
        - name
        - message
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: doggie
        message:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            message:
              type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Vendor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Vendor'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header